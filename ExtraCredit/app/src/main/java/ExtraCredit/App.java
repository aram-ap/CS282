/*
 * This source file was generated by the Gradle 'init' task
 */
package ExtraCredit;
import java.util.Scanner;

public class App {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter base: ");
        int base = sc.nextInt();

        System.out.print("Enter exponent: ");
        int exponent = sc.nextInt();
        int[] binaryExp = DecimalToBinary(exponent);

        System.out.print("Enter mod: ");
        int mod = sc.nextInt();

        int result = BinaryModularExponentiation(binaryExp, base, mod);
        System.out.println("Result: " + result);

        System.out.println("findA_n(5, 0) = " + findA_n(5, 0));
        System.out.println("findA_n(5, 1) = " + findA_n(5, 1));
        System.out.println("findA_n(5, 2) = " + findA_n(5, 2));
    }

    public static int[] DecimalToBinary(int decimal) {
        String binary = Integer.toBinaryString(decimal);
        int[] binaryArr = new int[binary.length()];
        for (int i = 0; i < binary.length(); i++) {
            binaryArr[i] = binary.charAt(i) - '0';
        }
        return binaryArr;
    }

    public static int BinaryModularExponentiation(int[] binaryExp, int base, int mod) {
        int result = 1;
        for (int i = binaryExp.length - 1; i >= 0; i--) {
            if (binaryExp[i] == 1)
                result = (result * base) % mod;
            base = (base * base) % mod;
        }
        return result;
    }

    public static int findA_n(int n, int a_0) {
        if (n == 0)
            return a_0;
        else
            return 4 * findA_n(n-1, a_0) - 3;
    }
}
