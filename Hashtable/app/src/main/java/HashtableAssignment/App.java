/*
 * This source file was generated by the Gradle 'init' task
 */
package HashtableAssignment;
import java.io.*;
import java.util.Scanner;
import java.util.Random;

public class App {
    static Scanner in;

    public static void main(String[] args) {
        try {
            in = new Scanner(System.in);
            String name;
            int aKey;
            Node aDataItem;
            int size, n, keysPerCell = 100;
            // get sizes
            System.out.print("Enter size of hash table: ");

            size = getInt();

            System.out.print("Enter initial number of items: ");
            n = getInt();
            // make table
            Hashtable theHashTable = new Hashtable(size);
            for(int j=0; j<n; j++) // insert data
            {
                aKey = (int)(java.lang.Math.random() *
                        keysPerCell * size);

                while(theHashTable.find(aKey) != null) {
                    aKey = (int)(java.lang.Math.random() *
                            keysPerCell * size);
                }

                // aDataItem = new Node(aKey);

                name = getRandomName();
                Student s = new Student(name, aKey);
                theHashTable.insert(s);
            }
            while(true) // interact with user
            {
                System.out.print("Enter first letter of ");
                System.out.print("show, insert, delete, find, or quit: ");
                char choice = getChar();
                switch(choice)
                {
                    case 's':
                        theHashTable.displayTable();
                        break;
                    case 'i':

                        System.out.println("Enter a name: ");
                        name = getString();

                        System.out.print("Enter a student id: ");
                        aKey = getInt();
                        while(theHashTable.find(aKey) != null) {
                            System.out.println(String.valueOf(aKey) + " exists! Please add another.");
                            aKey = getInt();
                        }
                        // aDataItem = new Node(aKey);
                        Student s = new Student(name, aKey);
                        theHashTable.insert(s);
                        break;
                    case 'd':
                        System.out.print("Enter student id to delete: ");
                        aKey = getInt();
                        theHashTable.delete(aKey);
                        break;
                    case 'f':
                        System.out.print("Enter key value to find: ");
                        aKey = getInt();
                        aDataItem = theHashTable.find(aKey);
                        if(aDataItem != null)
                            System.out.println("Found student with id \'" + aKey + "\': " + aDataItem);
                        else
                            System.out.println("Could not find " + aKey);
                        break;
                    case 'q':
                        in.close();
                        return;
                    default:
                        System.out.print("Invalid entry\n");
                } // end switch
            } // end while
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
    }
    //--------------------------------------------------------------
    public static String getString() throws IOException
    {
        // InputStreamReader isr = new InputStreamReader(System.in);
        // BufferedReader br = new BufferedReader(isr);
        // String s = br.readLine();
        String s = in.nextLine();
        return s;
    }
    //-------------------------------------------------------------
    public static char getChar() throws IOException
    {
        String s = getString();
        return s.charAt(0);
    }
    //-------------------------------------------------------------
    public static int getInt() throws IOException
    {
        String s = getString();
        return Integer.parseInt(s);
    }

    public static String getRandomName() {
        String name = "";
        Random random = new Random();

        int lengthFirst = FirstNames.values().length;
        int lengthLast = LastNames.values().length;

        name += FirstNames.values()[random.nextInt(0, lengthFirst)].toString();
        name += " ";
        name += LastNames.values()[random.nextInt(0, lengthLast)].toString();

        return name;
    }
    //--------------------------------------------------------------
} // end class HashChainApp
